{"version":3,"file":"ts-async-queue.iife.js","sources":["../src/queueError.ts","../src/taskQueue.ts"],"sourcesContent":["import { TaskQueue } from './taskQueue';\n\n/**\n * An error raised during the queue execution\n */\nexport class QueueError<T> extends Error {\n  constructor(\n    message: string,\n    public readonly queue: TaskQueue,\n    public data?: T\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, QueueError.prototype);\n    this.name = 'QueueError';\n  }\n\n  public get failedTask() {\n    return this.queue.currentRunningTask!;\n  }\n\n  public get failedTaskIndex() {\n    return this.queue.currentTaskIndex;\n  }\n\n  toString() {\n    return this.name + ': ' + this.message + '\\n' + this.data;\n  }\n}\n","import { QueueError } from './queueError';\n\n/**\n * A function that returns promise and has no arguments\n */\nexport type Task<E = any> = () => Promise<E>;\n\n/**\n * Manages a queue of async tasks\n *\n * @class TaskQueue\n */\nexport class TaskQueue {\n  /**\n   * Creates an instance of TaskQueue.\n   */\n  constructor();\n  /**\n   * Creates an instance of TaskQueue.\n   * @param {Task[]} [tasks=[]] Tasklist\n   */\n  constructor(tasks: Task[]);\n  constructor(\n    /**\n     * Tasklist\n     */\n    protected tasks: Task[] = []\n  ) {}\n\n  /**\n   * The most recent running queue\n   */\n  protected lastQueue?: Promise<any[]>;\n\n  /**\n   * Results of a last queue execution\n   */\n  protected _lastResults: any[] = [];\n\n  /**\n   * Results of a last queue execution.\n   *\n   * Empty, if execution hasn't started yet.\n   */\n  public get lastResults() {\n    return this._lastResults.slice();\n  }\n\n\n  /**\n   * `true` if the queue is running\n   *\n   * SHOULD NOT BE MODIFIED outside the class\n   */\n  protected running: boolean = false;\n\n\n  /**\n   * `true` if the queue is running\n   */\n  public get isRunning() {\n    return this.running;\n  }\n\n  /**\n   * An index at which the queue is currenlty running\n   */\n  protected index = -1;\n\n\n  /**\n   * A task index at which the queue is currently running\n   *\n   * `-1` if the queue is not currently running\n   */\n  public get currentTaskIndex() {\n    return this.index;\n  }\n\n  /**\n   * A task which is currently running in the queue\n   *\n   * `undefined` if the queue is not currently running\n   */\n  public get currentRunningTask(): Task | undefined {\n    return this.tasks[this.currentTaskIndex];\n  }\n\n  /**\n   * Remove a task from queue by its index\n   *\n   * @returns a removed task if found\n   */\n  protected dequeueByIndex(index: number) {\n    if (index > -1 && this.tasks[index]) {\n      const task = this.tasks[index];\n      this.tasks.splice(index, 1);\n\n      return task;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Remove a task from queue by its reference. If no task was given, removes the last task.\n   * @param {T} [task] a reference to the task function to remove by\n   * @returns a removed task if found\n   */\n  protected dequeueByTask<T extends Task>(task?: T) {\n    return this.dequeueByIndex(\n      task ? this.tasks.findIndex(t => t === task) : this.length - 1\n    );\n  }\n\n  /**\n   * Start executing the queue from a certain point.\n   * Halts if `running` flag is off (pause has occured).\n   *\n   * If any error in any task is raised - pauses queue execution and throws the error upstack.\n   *\n   * @param {number} from\n   *    A point to execute a queue from.\n   * @param {Array<any>} lastResults\n   *    Saved results to add to.\n   * @param {boolean} running\n   *    Internal indication if the method should continue running.\n   *    Passing `false` will result in the method not running.\n   * @returns a promise that resolves to task results array when the queue is finished\n   */\n  protected launchFrom(from: number, lastResults: any[] = [], running: boolean = true): Promise<any[]> {\n    this._lastResults = lastResults;\n\n    if (from < this.tasks.length) {\n      this.index = from;\n\n      if (running) {\n        this.running = running;\n\n        return this.tasks[from]().then(result => {\n          lastResults.push(result);\n\n          return this.launchFrom(from + 1, lastResults, this.running);\n        }, e => {\n          this.running = false;\n          throw new QueueError(`Queue paused at task #${from + 1} due to error in handler ${this.tasks[this.index]}`, this, e);\n        });\n      }\n    } else {\n      this.running = false;\n    }\n\n    return Promise.resolve(this.lastResults);\n  }\n\n  /**\n   * Adds one or more tasks to queue.\n   */\n  public enqueue(...tasks: Task[]) {\n    this.tasks.push.apply(this.tasks, tasks);\n  }\n\n  /**\n   * Removes task from the queue.\n   * @returns a removed task if found\n   */\n  public dequeue(task?: Task): Task | undefined;\n  public dequeue(index: number): Task | undefined;\n  public dequeue(): Task | undefined {\n    const arg = arguments[0];\n\n    if (typeof arg === 'number') {\n      return this.dequeueByIndex(arg);\n    } else if (typeof arg === 'function' || !arg) {\n      return this.dequeueByTask(arg);\n    }\n\n    throw new TypeError('Argument\\'s type must either be number, function or undefined!');\n  }\n\n  /**\n   * Removes the last task from the queue.\n   * @returns a removed task if found\n   */\n  public pop() {\n    return this.dequeue();\n  }\n\n  /**\n   * Get last added task without mutating the queue\n   */\n  public peek(): Task | undefined {\n    return this.tasks[this.tasks.length - 1];\n  }\n\n\n  /**\n   * Last added task\n   */\n  public get last() {\n    return this.peek();\n  }\n\n  /**\n   * Queue length\n   */\n  public get length() {\n    return this.tasks.length;\n  }\n\n  /**\n   * Completely clears the queue and stops executions.\n   */\n  public clear() {\n    this.index = -1;\n    this.running = false;\n    this.lastQueue = undefined;\n    this.tasks.splice(0);\n  }\n\n  /**\n   * Pauses the queue's execution flow after a nearest task is completed.\n   *\n   * @returns a promise that resolves as soon as the queue is paused\n   */\n  public pause() {\n    this.running = false;\n\n    return this.lastQueue || Promise.resolve([]);\n  }\n\n  /**\n   * Resumes a previously paused queue.\n   *\n   * @returns a promise that resolves as soon as the queue is completed\n   */\n  public resume() {\n    return this.lastQueue = this.launchFrom(this.index, this._lastResults);\n  }\n\n  /**\n   * Stops queue execution and clears results.\n   *\n   * @returns a promise that resolves to queue results (or `undefined` if the queue has already been stopeed) as soon as the queue completely stops executing\n   */\n  public stop() {\n    return this.pause()\n      .then(results => (\n        this.clear(),\n        results\n      ));\n  }\n\n  /**\n   * Starts task queue execution.\n   *\n   * Returns currenlty executed queue if execution already started\n   *\n   * @returns promise with task results as an array sorted by task execution order\n   */\n  public start() {\n    return this.lastQueue = this.lastQueue || this.launchFrom(0);\n  }\n}\n"],"names":["tslib_1.__extends"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEA;;;AAGA;QAAmCA,8BAAK;QACtC,oBACE,OAAe,EACC,KAAgB,EACzB,IAAQ;YAHjB,YAKE,kBAAM,OAAO,CAAC,+DAGf;YANiB,WAAK,GAAL,KAAK,CAAW;YACzB,UAAI,GAAJ,IAAI,CAAI;YAGf,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;YAClD,KAAI,CAAC,IAAI,GAAG,YAAY,CAAC;;SAC1B;QAED,sBAAW,kCAAU;iBAArB;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,kBAAmB,CAAC;aACvC;;;WAAA;QAED,sBAAW,uCAAe;iBAA1B;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;aACpC;;;WAAA;QAED,6BAAQ,GAAR;YACE,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;SAC3D;QACH,iBAAC;IAAD,CAAC,CAtBkC,KAAK;;ICExC;;;;;AAKA;QAUE;;;;QAIY,KAAkB;YAAlB,sBAAA,EAAA,UAAkB;YAAlB,UAAK,GAAL,KAAK,CAAa;;;;YAWpB,iBAAY,GAAU,EAAE,CAAC;;;;;;YAiBzB,YAAO,GAAY,KAAK,CAAC;;;;YAazB,UAAK,GAAG,CAAC,CAAC,CAAC;SAxCjB;QAiBJ,sBAAW,kCAAW;;;;;;iBAAtB;gBACE,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;aAClC;;;WAAA;QAcD,sBAAW,gCAAS;;;;iBAApB;gBACE,OAAO,IAAI,CAAC,OAAO,CAAC;aACrB;;;WAAA;QAaD,sBAAW,uCAAgB;;;;;;iBAA3B;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC;aACnB;;;WAAA;QAOD,sBAAW,yCAAkB;;;;;;iBAA7B;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aAC1C;;;WAAA;;;;;;QAOS,kCAAc,GAAxB,UAAyB,KAAa;YACpC,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;gBACnC,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;gBAE5B,OAAO,IAAI,CAAC;aACb;YAED,OAAO,SAAS,CAAC;SAClB;;;;;;QAOS,iCAAa,GAAvB,UAAwC,IAAQ;YAC9C,OAAO,IAAI,CAAC,cAAc,CACxB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,KAAK,IAAI,GAAA,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAC/D,CAAC;SACH;;;;;;;;;;;;;;;;QAiBS,8BAAU,GAApB,UAAqB,IAAY,EAAE,WAAuB,EAAE,OAAuB;YAAnF,iBAuBC;YAvBkC,4BAAA,EAAA,gBAAuB;YAAE,wBAAA,EAAA,cAAuB;YACjF,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAEhC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;gBAElB,IAAI,OAAO,EAAE;oBACX,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;oBAEvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,UAAA,MAAM;wBACnC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;wBAEzB,OAAO,KAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,EAAE,WAAW,EAAE,KAAI,CAAC,OAAO,CAAC,CAAC;qBAC7D,EAAE,UAAA,CAAC;wBACF,KAAI,CAAC,OAAO,GAAG,KAAK,CAAC;wBACrB,MAAM,IAAI,UAAU,CAAC,4BAAyB,IAAI,GAAG,CAAC,kCAA4B,KAAI,CAAC,KAAK,CAAC,KAAI,CAAC,KAAK,CAAG,EAAE,KAAI,EAAE,CAAC,CAAC,CAAC;qBACtH,CAAC,CAAC;iBACJ;aACF;iBAAM;gBACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;aACtB;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;SAC1C;;;;QAKM,2BAAO,GAAd;YAAe,eAAgB;iBAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;gBAAhB,0BAAgB;;YAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;SAC1C;QAQM,2BAAO,GAAd;YACE,IAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAEzB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;gBAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;aACjC;iBAAM,IAAI,OAAO,GAAG,KAAK,UAAU,IAAI,CAAC,GAAG,EAAE;gBAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;aAChC;YAED,MAAM,IAAI,SAAS,CAAC,gEAAgE,CAAC,CAAC;SACvF;;;;;QAMM,uBAAG,GAAV;YACE,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;SACvB;;;;QAKM,wBAAI,GAAX;YACE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAC1C;QAMD,sBAAW,2BAAI;;;;iBAAf;gBACE,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;aACpB;;;WAAA;QAKD,sBAAW,6BAAM;;;;iBAAjB;gBACE,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;aAC1B;;;WAAA;;;;QAKM,yBAAK,GAAZ;YACE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;YAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SACtB;;;;;;QAOM,yBAAK,GAAZ;YACE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;YAErB,OAAO,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;SAC9C;;;;;;QAOM,0BAAM,GAAb;YACE,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SACxE;;;;;;QAOM,wBAAI,GAAX;YAAA,iBAMC;YALC,OAAO,IAAI,CAAC,KAAK,EAAE;iBAChB,IAAI,CAAC,UAAA,OAAO,IAAI,QACf,KAAI,CAAC,KAAK,EAAE;gBACZ,OAAO,IACR,CAAC,CAAC;SACN;;;;;;;;QASM,yBAAK,GAAZ;YACE,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;SAC9D;QACH,gBAAC;IAAD,CAAC;;;;;;;;;;;"}