{"version":3,"file":"ts-async-queue.esnext.js","sources":["../src/queueError.ts","../src/taskQueue.ts"],"sourcesContent":["import { TaskQueue } from './taskQueue';\n\n/**\n * An error raised during the queue execution\n */\nexport class QueueError<T> extends Error {\n  constructor(\n    message: string,\n    public readonly queue: TaskQueue,\n    public data?: T\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, QueueError.prototype);\n    this.name = 'QueueError';\n  }\n\n  public get failedTask() {\n    return this.queue.currentRunningTask!;\n  }\n\n  public get failedTaskIndex() {\n    return this.queue.currentTaskIndex;\n  }\n\n  toString() {\n    return this.name + ': ' + this.message + '\\n' + this.data;\n  }\n}\n","import { QueueError } from './queueError';\n\n/**\n * A function that returns promise and has no arguments\n */\nexport type Task<E = any> = () => Promise<E>;\n\n/**\n * Manages a queue of async tasks\n *\n * @class TaskQueue\n */\nexport class TaskQueue {\n  /**\n   * Creates an instance of TaskQueue.\n   */\n  constructor();\n  /**\n   * Creates an instance of TaskQueue.\n   * @param {Task[]} [tasks=[]] Tasklist\n   */\n  constructor(tasks: Task[]);\n  constructor(\n    /**\n     * Tasklist\n     */\n    protected tasks: Task[] = []\n  ) {}\n\n  /**\n   * The most recent running queue\n   */\n  protected lastQueue?: Promise<any[]>;\n\n  /**\n   * Results of a last queue execution\n   */\n  protected _lastResults: any[] = [];\n\n  /**\n   * Results of a last queue execution.\n   *\n   * Empty, if execution hasn't started yet.\n   */\n  public get lastResults() {\n    return this._lastResults.slice();\n  }\n\n\n  /**\n   * `true` if the queue is running\n   *\n   * SHOULD NOT BE MODIFIED outside the class\n   */\n  protected running: boolean = false;\n\n\n  /**\n   * `true` if the queue is running\n   */\n  public get isRunning() {\n    return this.running;\n  }\n\n  /**\n   * An index at which the queue is currenlty running\n   */\n  protected index = -1;\n\n\n  /**\n   * A task index at which the queue is currently running\n   *\n   * `-1` if the queue is not currently running\n   */\n  public get currentTaskIndex() {\n    return this.index;\n  }\n\n  /**\n   * A task which is currently running in the queue\n   *\n   * `undefined` if the queue is not currently running\n   */\n  public get currentRunningTask(): Task | undefined {\n    return this.tasks[this.currentTaskIndex];\n  }\n\n  /**\n   * Remove a task from queue by its index\n   *\n   * @returns a removed task if found\n   */\n  protected dequeueByIndex(index: number) {\n    if (index > -1 && this.tasks[index]) {\n      const task = this.tasks[index];\n      this.tasks.splice(index, 1);\n\n      return task;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Remove a task from queue by its reference. If no task was given, removes the last task.\n   * @param {T} [task] a reference to the task function to remove by\n   * @returns a removed task if found\n   */\n  protected dequeueByTask<T extends Task>(task?: T) {\n    return this.dequeueByIndex(\n      task ? this.tasks.findIndex(t => t === task) : this.length - 1\n    );\n  }\n\n  /**\n   * Start executing the queue from a certain point.\n   * Halts if `running` flag is off (pause has occured).\n   *\n   * If any error in any task is raised - pauses queue execution and throws the error upstack.\n   *\n   * @param {number} from\n   *    A point to execute a queue from.\n   * @param {Array<any>} lastResults\n   *    Saved results to add to.\n   * @param {boolean} running\n   *    Internal indication if the method should continue running.\n   *    Passing `false` will result in the method not running.\n   * @returns a promise that resolves to task results array when the queue is finished\n   */\n  protected launchFrom(from: number, lastResults: any[] = [], running: boolean = true): Promise<any[]> {\n    this._lastResults = lastResults;\n\n    if (from < this.tasks.length) {\n      this.index = from;\n\n      if (running) {\n        this.running = running;\n\n        return this.tasks[from]().then(result => {\n          lastResults.push(result);\n\n          return this.launchFrom(from + 1, lastResults, this.running);\n        }, e => {\n          this.running = false;\n          throw new QueueError(`Queue paused at task #${from + 1} due to error in handler ${this.tasks[this.index]}`, this, e);\n        });\n      }\n    } else {\n      this.running = false;\n    }\n\n    return Promise.resolve(this.lastResults);\n  }\n\n  /**\n   * Adds one or more tasks to queue.\n   */\n  public enqueue(...tasks: Task[]) {\n    this.tasks.push.apply(this.tasks, tasks);\n  }\n\n  /**\n   * Removes task from the queue.\n   * @returns a removed task if found\n   */\n  public dequeue(task?: Task): Task | undefined;\n  public dequeue(index: number): Task | undefined;\n  public dequeue(): Task | undefined {\n    const arg = arguments[0];\n\n    if (typeof arg === 'number') {\n      return this.dequeueByIndex(arg);\n    } else if (typeof arg === 'function' || !arg) {\n      return this.dequeueByTask(arg);\n    }\n\n    throw new TypeError('Argument\\'s type must either be number, function or undefined!');\n  }\n\n  /**\n   * Removes the last task from the queue.\n   * @returns a removed task if found\n   */\n  public pop() {\n    return this.dequeue();\n  }\n\n  /**\n   * Get last added task without mutating the queue\n   */\n  public peek(): Task | undefined {\n    return this.tasks[this.tasks.length - 1];\n  }\n\n\n  /**\n   * Last added task\n   */\n  public get last() {\n    return this.peek();\n  }\n\n  /**\n   * Queue length\n   */\n  public get length() {\n    return this.tasks.length;\n  }\n\n  /**\n   * Completely clears the queue and stops executions.\n   */\n  public clear() {\n    this.index = -1;\n    this.running = false;\n    this.lastQueue = undefined;\n    this.tasks.splice(0);\n  }\n\n  /**\n   * Pauses the queue's execution flow after a nearest task is completed.\n   *\n   * @returns a promise that resolves as soon as the queue is paused\n   */\n  public pause() {\n    this.running = false;\n\n    return this.lastQueue || Promise.resolve([]);\n  }\n\n  /**\n   * Resumes a previously paused queue.\n   *\n   * @returns a promise that resolves as soon as the queue is completed\n   */\n  public resume() {\n    return this.lastQueue = this.launchFrom(this.index, this._lastResults);\n  }\n\n  /**\n   * Stops queue execution and clears results.\n   *\n   * @returns a promise that resolves to queue results (or `undefined` if the queue has already been stopeed) as soon as the queue completely stops executing\n   */\n  public stop() {\n    return this.pause()\n      .then(results => (\n        this.clear(),\n        results\n      ));\n  }\n\n  /**\n   * Starts task queue execution.\n   *\n   * Returns currenlty executed queue if execution already started\n   *\n   * @returns promise with task results as an array sorted by task execution order\n   */\n  public start() {\n    return this.lastQueue = this.lastQueue || this.launchFrom(0);\n  }\n}\n"],"names":[],"mappings":"AAEA;;;AAGA,MAAa,UAAc,SAAQ,KAAK;IACtC,YACE,OAAe,EACC,KAAgB,EACzB,IAAQ;QAEf,KAAK,CAAC,OAAO,CAAC,uDAAsD;QAHpD,UAAK,GAAL,KAAK,CAAW;QACzB,SAAI,GAAJ,IAAI,CAAI;QAGf,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC;KAC1B;IAED,IAAW,UAAU;QACnB,OAAO,IAAI,CAAC,KAAK,CAAC,kBAAmB,CAAC;KACvC;IAED,IAAW,eAAe;QACxB,OAAO,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC;KACpC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,GAAG,IAAI,CAAC,OAAO,GAAG,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;KAC3D;CACF;;ACpBD;;;;;AAKA,MAAa,SAAS;IAUpB;;;;IAIY,QAAgB,EAAE;QAAlB,UAAK,GAAL,KAAK,CAAa;;;;QAWpB,iBAAY,GAAU,EAAE,CAAC;;;;;;QAiBzB,YAAO,GAAY,KAAK,CAAC;;;;QAazB,UAAK,GAAG,CAAC,CAAC,CAAC;KAxCjB;;;;;;IAiBJ,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;KAClC;;;;IAcD,IAAW,SAAS;QAClB,OAAO,IAAI,CAAC,OAAO,CAAC;KACrB;;;;;;IAaD,IAAW,gBAAgB;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC;KACnB;;;;;;IAOD,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;KAC1C;;;;;;IAOS,cAAc,CAAC,KAAa;QACpC,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YACnC,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC/B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE5B,OAAO,IAAI,CAAC;SACb;QAED,OAAO,SAAS,CAAC;KAClB;;;;;;IAOS,aAAa,CAAiB,IAAQ;QAC9C,OAAO,IAAI,CAAC,cAAc,CACxB,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAC/D,CAAC;KACH;;;;;;;;;;;;;;;;IAiBS,UAAU,CAAC,IAAY,EAAE,cAAqB,EAAE,EAAE,UAAmB,IAAI;QACjF,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;QAEhC,IAAI,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;YAC5B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;YAElB,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;gBAEvB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM;oBACnC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAEzB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,EAAE,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC7D,EAAE,CAAC;oBACF,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;oBACrB,MAAM,IAAI,UAAU,CAAC,yBAAyB,IAAI,GAAG,CAAC,4BAA4B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;iBACtH,CAAC,CAAC;aACJ;SACF;aAAM;YACL,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;SACtB;QAED,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KAC1C;;;;IAKM,OAAO,CAAC,GAAG,KAAa;QAC7B,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;KAC1C;IAQM,OAAO;QACZ,MAAM,GAAG,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;QAEzB,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;YAC3B,OAAO,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;SACjC;aAAM,IAAI,OAAO,GAAG,KAAK,UAAU,IAAI,CAAC,GAAG,EAAE;YAC5C,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;SAChC;QAED,MAAM,IAAI,SAAS,CAAC,gEAAgE,CAAC,CAAC;KACvF;;;;;IAMM,GAAG;QACR,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC;KACvB;;;;IAKM,IAAI;QACT,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;KAC1C;;;;IAMD,IAAW,IAAI;QACb,OAAO,IAAI,CAAC,IAAI,EAAE,CAAC;KACpB;;;;IAKD,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;KAC1B;;;;IAKM,KAAK;QACV,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;QAChB,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;KACtB;;;;;;IAOM,KAAK;QACV,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QAErB,OAAO,IAAI,CAAC,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;KAC9C;;;;;;IAOM,MAAM;QACX,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;KACxE;;;;;;IAOM,IAAI;QACT,OAAO,IAAI,CAAC,KAAK,EAAE;aAChB,IAAI,CAAC,OAAO,KACX,IAAI,CAAC,KAAK,EAAE;YACZ,OAAO,CACR,CAAC,CAAC;KACN;;;;;;;;IASM,KAAK;QACV,OAAO,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;KAC9D;CACF;;;;"}