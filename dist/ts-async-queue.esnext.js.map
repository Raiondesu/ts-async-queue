{"version":3,"file":"ts-async-queue.esnext.js","sources":["../src/queueError.ts","../src/taskQueue.ts"],"sourcesContent":["import { TaskQueue } from './taskQueue';\n\n/**\n * An error raised during the queue execution\n */\nexport class QueueError<T> extends Error {\n  constructor(\n    message: string,\n    public readonly queue: TaskQueue,\n    public data?: T\n  ) {\n    super(message)/* istanbul ignore next: because stupid typescript */;\n    Object.setPrototypeOf(this, QueueError.prototype);\n    this.name = 'QueueError';\n  }\n\n  toString() {\n    return this.name + ': ' + this.message;\n  }\n}\n","import { QueueError } from './queueError';\n\n/**\n * A function that returns promise and has no arguments\n */\nexport type Task<E = any> = () => Promise<E>;\n\n/**\n * Manages a queue of async tasks\n *\n * @class TaskQueue\n */\nexport class TaskQueue {\n  /**\n   * Creates an instance of TaskQueue.\n   * @param {Task[]} [tasks=[]] Tasklist\n   */\n  constructor(\n    /**\n     * Tasklist\n     */\n    protected tasks: Task[] = []\n  ) {}\n  /**\n   * The most recent running queue\n   */\n  protected lastQueue?: Promise<any[]>;\n\n  /**\n   * Results of a last queue execution\n   */\n  protected _lastResults?: any[];\n\n  /**\n   * Results of a last queue execution\n   */\n  public get lastResults() {\n    return this._lastResults && this._lastResults.slice();\n  }\n\n\n  /**\n   * `true` if the queue is running\n   */\n  protected running: boolean = false;\n\n\n  /**\n   * `true` if the queue is running\n   */\n  public get isRunning() {\n    return this.running;\n  }\n\n  /**\n   * An index at which the queue was paused\n   */\n  protected pauseIndex: number = -1;\n\n  /**\n   * Remove a task from queue by its index\n   *\n   * @returns a removed task if found\n   */\n  protected dequeueByIndex(index: number) {\n    if (index === this.length - 1) {\n      return this.tasks.pop();\n    }\n\n    if (index > -1 && this.tasks[index]) {\n      const task = this.tasks[index];\n      this.tasks.splice(index, 1);\n\n      return task;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Remove a task from queue by its reference. If no task was given, removes the last task.\n   * @param {T} [task] a reference to the task function to remove by\n   * @returns a removed task if found\n   */\n  protected dequeueByTask<T extends Task>(task?: T) {\n    if (!task) {\n      return this.tasks.pop();\n    }\n\n    const index = this.tasks.findIndex(t => t === task);\n\n    return this.dequeueByIndex(index);\n  }\n\n  /**\n   * Start executing the queue from a certain point.\n   * Halts if `running` flag is off (pause has occured).\n   *\n   * If any error in any task is raised - pauses queue execution and throws the error upstack.\n   *\n   * @param {number} from a point to execute a queue from\n   * @param {Array<any>} last saved results to add to\n   * @returns a promise that resolves to task results array when the queue is finished\n   */\n  protected async launchFrom(from: number, lastResults: any[] = []) {\n    this._lastResults = lastResults;\n    const tasks = this.tasks.slice(from);\n\n    this.running = true;\n    this.pauseIndex = -1;\n\n    for (let i = 0, task = tasks[i]; i < tasks.length; i++, task = tasks[i]) {\n      if (!this.running) {\n        this.pauseIndex = i;\n        break;\n      }\n\n      try {\n        this._lastResults.push(await task());\n      } catch (e) {\n        this.pauseIndex = i;\n        this.running = false;\n        throw new QueueError(`Queue paused at task #${i + 1} due to error in handler ${task}`, this, e);\n      }\n    }\n\n    this.running = false;\n\n    return this._lastResults.slice();\n  }\n\n  /**\n   * Adds one or more tasks to queue.\n   */\n  public enqueue<T extends Task>(...tasks: T[]) {\n    this.tasks.push.apply(this.tasks, tasks);\n  }\n\n  /**\n   * Removes task from the queue.\n   * @returns a removed task if found\n   */\n  public dequeue<T extends Task>(task?: T): Task | undefined;\n  public dequeue(index: number): Task | undefined;\n  public dequeue(): Task | undefined {\n    const arg = arguments[0];\n\n    if (typeof arg === 'number') {\n      return this.dequeueByIndex(arg);\n    } else if (typeof arg === 'function' || !arg) {\n      return this.dequeueByTask(arg);\n    }\n\n    throw new TypeError('Argument\\'s type must either be number, function or undefined!');\n  }\n\n  /**\n   * Removes the last task from the queue.\n   * @returns a removed task if found\n   */\n  public pop() {\n    return this.dequeue();\n  }\n\n  /**\n   * Get last added task without mutating the queue\n   */\n  public peek() {\n    return this.tasks[this.tasks.length - 1];\n  }\n\n\n  /**\n   * Last added task\n   */\n  public get last() {\n    return this.peek();\n  }\n\n  /**\n   * Queue length\n   */\n  public get length() {\n    return this.tasks.length;\n  }\n\n  /**\n   * Completely clears the queue and stops executions.\n   *\n   * If the queue is currently running it is recommended to call `await pause()` first!\n   */\n  public clear() {\n    this.pauseIndex = -1;\n    this.lastQueue = undefined;\n    this.tasks.splice(0);\n  }\n\n  /**\n   * Pauses the queue's execution flow after a nearest task is completed.\n   *\n   * @returns a promise that resolves as soon as the queue is paused\n   */\n  public pause() {\n    this.running = false;\n\n    return this.lastQueue;\n  }\n\n  /**\n   * Resumes a previously paused queue.\n   *\n   * @returns a promise that resolves as soon as the queue is completed\n   */\n  public resume() {\n    return this.lastQueue = this.launchFrom(this.pauseIndex, this._lastResults);\n  }\n\n  /**\n   * Stops queue execution and clears results.\n   *\n   * @returns a promise that resolves to queue results (or `undefined` if the queue has already been stopeed) as soon as the queue completely stops executing\n   */\n  public async stop() {\n    await this.pause();\n    this.pauseIndex = -1;\n    this.lastQueue = undefined;\n    const results = this.lastResults;\n\n    if (this._lastResults) {\n      this._lastResults = undefined;\n    }\n\n    return results;\n  }\n\n  /**\n   * Starts task queue execution.\n   *\n   * Returns currenlty executed queue if execution already started\n   *\n   * @returns promise with task results as an array sorted by task execution order\n   */\n  public start() {\n    if (this.lastQueue) {\n      return this.lastQueue;\n    }\n\n    return this.lastQueue = this.launchFrom(0);\n  }\n}\n"],"names":[],"mappings":"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"}